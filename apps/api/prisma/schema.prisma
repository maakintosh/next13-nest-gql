// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider                              = "node node_modules/prisma-nestjs-graphql"
  // detailed options â†’ https://github.com/unlight/prisma-nestjs-graphql
  output                                = "../src/@generated/prisma-nestjs-graphql"
  purgeOutput                           = true
  // falsing this option resolved errors that index.ts file hadn't generated Int / Float Filter classes
  combineScalarFilters                  = false
  emitSingle                            = true
  // removes input types for atomic operations
  noAtomicOperations                    = true
  // enabling this will break compatiblity between Prisma types and generated classes.
  requireSingleFieldsInWhereUniqueInput = true

  // field validator
  fields_Validator_input  = true
  fields_Validator_output = true
  fields_Validator_model  = true
  fields_Validator_from   = "class-validator"
  // Args where|data nested validator
  decorate_1_type         = "*Args"
  decorate_1_field        = "@(data|where)"
  decorate_1_name         = ValidateNested
  decorate_1_from         = "class-validator"
  decorate_1_arguments    = "[]"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "./ERD.svg"
  theme                     = "forest"
  mmdcPath                  = "node_modules/.bin"
  includeRelationFromFields = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  ///@Validator.IsEmail()
  email     String   @unique
  ///@Validator.IsString()
  ///@Validator.MaxLength(15)
  name      String
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  ///@Validator.IsString()
  title     String
  ///@Validator.IsString()
  content   String
  ///@Validator.IsBoolean()
  published Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
